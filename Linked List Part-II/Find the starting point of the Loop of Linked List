Q. Linked List Cycle II.
Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.
Do not modify the linked list.

Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Example 2:
Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.

Example 3:
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
 
Constraints:
The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.

Approach 1: we can use hashmap or hashset to find the point of intersection, we iterate through the LL and keep inserting the nodes and if any node is repeated that's our answer.
            Time Complexity: O(N)
            Space Complexity: O(N)
            Code:
              ListNode *detectCycle(ListNode *head) {
                //brute force using hashmap
                ListNode* itr = head;
                unordered_map<ListNode*,bool> mp;
                while(itr){
                    if(mp[itr]==true)
                        return itr;
                    mp[itr] = true;
                    itr=itr->next;
                }
                return NULL;
            }

Approach 2: There is an algorithm called Floys's Cycle detection. In this we use slow and fast pointers, first to detect the loop as we detect the loop we keep our fast pointer to start and increment one step both the
            pointers as we know our slow is at the point where both the pointers meet after a few iterations both the pointers will again meet and that is the point of intersection or we can that's the point of loop
            starting.
            Time Complexity: O(N)
            Space Complexity: O(1)
            Code:
              ListNode* LoopDetection(ListNode* head){
                if(head == NULL) return head;
                ListNode* slow = head;
                ListNode* fast = head;
                while(slow != NULL && fast != NULL){
                    fast = fast->next;
                    if(fast) fast = fast->next;
                    slow = slow ->next;
                    if(slow == fast) return slow;
                }
                return NULL;
            }
            ListNode *detectCycle(ListNode *head) {
                if(head == NULL) return head;
                ListNode* loopPoint = LoopDetection(head);
                if(loopPoint == NULL) return NULL;
                ListNode* slow = head;
                while(slow!=loopPoint){
                    slow = slow->next;
                    loopPoint = loopPoint->next;
                }
                return slow;
            }
