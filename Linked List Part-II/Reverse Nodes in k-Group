Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 
Constraints:
The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
Approach 1: we can use stack ds and store k elements in the stack and pop out and it got reversed and attach it with the last k elememts.
            Time Complexity : O(N)
            Space Complexity : O(N)

Approach 2: The logic is preety simple but implementation part is tricky, we first count the no. of elements in the LL and after every iteration we decrement k no. so that if less than k nos are left we leave it as 
            it is. we reverse the k elements in inside the while loop and subtract the k from the count while reversing we start the loop from 1 because we already at first element which needs to be reversed we do
            repeat this process k times.
            Time Complexity : O(N/k)*k = O(N)
            Space Complexity : O(1)
            code: 
              ListNode* reverseKGroup(ListNode* head, int k) {
                if(head == NULL || head ->next == NULL ||  k == 1) return head;
                ListNode* dummy = new ListNode(0);
                dummy->next = head;
                int cnt = 0;
                ListNode* temp = head;
                ListNode* prev = dummy; ListNode* cur = dummy; ListNode* nxt = dummy;
                while(temp!=NULL){
                    temp = temp->next;
                    cnt++;
                }
                temp = head;
                while(cnt>=k){
                    cur = prev->next;
                    nxt = cur->next;
                    for(int i=1; i<k; i++){
                        cur->next = nxt->next;
                        nxt->next = prev->next;
                        prev->next = nxt;
                        nxt = cur->next;
                    }
                    prev = cur;
                    cnt-=k;
                }
                return dummy->next;
            }

Approach 3: There is another way to look this problem is that, we break the k elements from LL and reverse it and again join it with the rest of the LL. 
            Time Complexity : O(N)
            Space Complexity: O(1)
              Code:
              ListNode* reverse(ListNode* head){
                if(head == NULL || head->next == NULL) return head;
                ListNode* prev = NULL;
                ListNode* cur = head;
                ListNode* nxt = head->next;
                while(nxt!=NULL){
                    cur->next = prev;
                    prev = cur;
                    cur = nxt;
                    nxt = nxt->next;
                }
                cur->next = prev;
                return cur;
            }
            ListNode* reverseKGroup(ListNode* head, int k) {
                // reversing k approach 
        
                ListNode* dummy = new ListNode(0);
                dummy->next = head;
                ListNode* cur = dummy;
                while(cur){
                    ListNode* temp = cur;
                    for(int i=0; i<k; i++){
                        temp = temp->next;
                        if(temp==NULL) return dummy->next;
                    }
                    ListNode* lastnode = cur->next; // first node which will be the last node from k elements
                    ListNode* nextfirst = temp->next; // first node from the next k elements so that we dont break the chain
                    temp->next = NULL; // breaking connection for the reverse
                    cur->next = reverse(cur); // attaching the reversed k elements to dummy list
                    lastnode->next = nextfirst; // attaching the lastnode with next k elements first node
                    cur = lastnode;
                }
                return dummy->next;
            }
