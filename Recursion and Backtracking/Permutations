Q. Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]
 
Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

Approach : To find the permutation using recursion we use swap method where we swap two elements and when base case meets we store that number.
          1. base case when idx == size of the array
          2. we have to swap every no. with other for that we'll use loop and do recursive call.
          3. after base case reach and swaps are done we need to backtrack that while returning our number should be correct.
          Time Complexity: O(2^N)
          Space Complexity: O(N) call stack
          Code: 
          class Solution {
          private:
              void answer(vector<vector<int>>& ans , vector<int> nums ,int i){
                  if(i>=nums.size()){
                      ans.push_back(nums);
                      return;
                  }   
                  for(int j=i;j<nums.size();j++){
                      swap(nums[i], nums[j]);
                      answer(ans , nums ,i+1);
                       swap(nums[i], nums[j]); // backtrack part
                  }
              }
          public:
              vector<vector<int>> permute(vector<int>& nums) {
                  vector<vector<int>> ans;
                  answer(ans, nums ,0);
                  return ans;
              }
        };
