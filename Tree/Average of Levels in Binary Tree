Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
Hence return [3, 14.5, 11].

Example 2:
Input: root = [3,9,20,15,7]
Output: [3.00000,14.50000,11.00000]

Constraints:
The number of nodes in the tree is in the range [1, 104].
-2^31 <= Node.val <= 2^31 - 1

logic: As we can see in this question its clearly states that we have to use level order traversal. 
      1. we use level order traversal.
      2. while traversing instead of storing the level wise we add the values of the nodes and count the number of nodes at that level so that we can find the average of that level
      3. store the average values of every level in an array
      T.C: O(N) S.C:O(N)
      code: 
           vector<double> averageOfLevels(TreeNode* root) {
              vector<double> ans;
              //base case
              if(!root) return ans;
              queue<TreeNode*> q;
              q.push(root);
              while(!q.empty()){
                  int size = q.size();
                  double value = 0;
                  int count = 0;
                  for(int i=0; i<size; i++){
                      TreeNode* node = q.front();
                      q.pop();
                      value += node->val;
                      count++;
                      if(node->left) q.push(node->left);
                      if(node->right) q.push(node->right);
                  }
                  
                  ans.push_back(value/count);
              }
              return ans;
          }
      
