Given the root of a binary tree, return the maximum width of the given tree.
The maximum width of a tree is the maximum width among all levels.
The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.
It is guaranteed that the answer will in the range of a 32-bit signed integer.

Example 1:
Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).

Example 2:
Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).

Example 3:
Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).

Constraints:
The number of nodes in the tree is in the range [1, 3000].
-100 <= Node.val <= 100

Intuition : As we have to calculate number of nodes at every level means we need to iterate level wise.

Approach : we use level order traversal, but at every level we index it with starting node as 1 to N node and calculate N-1+1 to get the number or nodes at that level.
          T.C: O(N) S.C:O(N)
          code:
              int widthOfBinaryTree(TreeNode* root) {
                //base case 
                if(!root) 
                    return 0;
                int ans = 0;
                queue<pair<TreeNode*,long long int>>q;
                q.push(make_pair(root,0));
                while(!q.empty()){
                    int size = q.size();
                    int minval = q.front().second;  // to get the minimum value of the starting node
                    int first,last;
                    for(int i=0; i<size; i++){
                        long long int cur_idx = q.front().second-minval;  // to avoid overflow we subtract
                        TreeNode* node = q.front().first;
                        q.pop();
                        if(i == 0) first = cur_idx;   // we take the starting value of that level
                        if(i == size-1) last = cur_idx; // ending value of that level
                        if(node->left)
                            q.push(make_pair(node->left,cur_idx*2+1));  // we push to the next level
                        if(node->right)
                            q.push(make_pair(node->right,cur_idx*2+2)); // we push to the next level
                    }
                    ans = max(ans, (last-first+1));    // the result 
                }
                return ans;
            }
