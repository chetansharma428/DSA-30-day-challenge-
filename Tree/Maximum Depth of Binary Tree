Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:
            3
          /  \
        9      20
              /  \
            15    7


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

Logic: we simply find the height of a BT and return it.
      T.c: O(N) S.C: O(H)
      code:
           int maxDepth(TreeNode* root) {
            if(!root) return 0;
    
            int left = maxDepth(root->left);
            int right = maxDepth(root->right);
    
            return max(left,right) + 1;
            
        }
