You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 
Constraints:
The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

Approach : This question is simply implementation question, the idea is simply like we add two no. the only thing is we need to take care of the pointers we dont go 
            null pointer exception, 
            sum = x+y+carry carry = sum/10 number = sum%10 
            Time Complexity : Omax(M,N)
            Space Complexity: O(N)
            code:
              ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
                if(l1==NULL) return l2;
                if(l2==NULL) return l1;
                if(l1->next==NULL && l1->val==0) return l2;
                if(l2->next==NULL && l2->val==0) return l1;
                
                ListNode* temp1 = l1;
                ListNode* temp2 = l2;
                ListNode* realhead = new ListNode(0);
                ListNode* head = realhead;
                int carry = 0;
                while(temp1!=NULL || temp2!=NULL || carry == 1){
                    int sum = 0;
                    if(temp1!=NULL){
                        sum+=temp1->val;
                        temp1 = temp1->next;
                    }
                    if(temp2!=NULL){
                        sum+=temp2->val;
                        temp2=temp2->next;
                    }
                    sum+=carry;
                    carry=sum/10;
                    ListNode* node = new ListNode(sum%10);
                    head->next = node;
                    head = head->next;
                }
                return realhead->next;
          }
