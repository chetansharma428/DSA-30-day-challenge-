Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 
Constraints:
The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100

Approach 1: we just count the no. of element in the linked list and divide by 2 and run a loop and return the element.
          Time Complexity: O(N)
          Space Complexity: O(1)
Approach 2: we can use fast and slow pointer to find mid, slow will move one step fast will most two step and when fast reaches NULL means we got our mid as slow pointer.
          Time Complexity: O(N/2)
          Space Complexity:O(1)
          code:
            ListNode* middleNode(ListNode* head) {
              if(head == NULL || head->next == NULL) return head;
              
              ListNode* slow = head;
              ListNode* fast = head;
              
              while(fast != NULL && fast->next != NULL){
                  slow = slow->next;
                  fast = fast->next->next;
              }
              return slow;
          }
