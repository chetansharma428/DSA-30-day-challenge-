PROBLEM STATEMENT:
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

Approach 1 : we can use two loops, first we subtract the target with the current element and find the difference value in the remaining array
            Time Complexity: O(N^2)
            Space Complexity: O(1)
            
            Code: 
            vector<int> twoSum(vector<int>& nums, int target) {
                //brute force O(N^2) O(1)
                int n = nums.size();
                vector<int> ans;
                if(n == 1) return ans;
                for(int i=0; i<n; i++){
                    int diff = target-nums[i];
                    for(int j=i+1; j<n; j++)
                        if(nums[j] == diff) ans.push_back({i,j});
                }
                return ans;
            }
Approach 2 : we can use hashmap for finding part and reduce the inside loop time complexity, we ll push the the diffence value with there index and check whether
              the diffence is already present in the map if present push it to answer array else push it to map.
              
              Time Complexity: O(N)
              Space Complexity: O(1)
              
              Code:
              vector<int> twoSum(vector<int>& nums, int target) {
                int n = nums.size();
                vector<int> ans={-1,-1};
                if(n == 1) return ans;
                unordered_map<int,int> mp;


                for(int i=0; i<n; i++){
                   int remaining_part = target - nums[i];
                    if(mp.find(remaining_part)!=mp.end()){
                      ans[0]=i;
                        ans[1]=mp[remaining_part];
                        return ans;
                    }
                    mp[nums[i]] = i;
                }
                return ans;
           }
              
