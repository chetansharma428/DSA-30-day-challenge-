Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
You must write an algorithm that runs in O(n) time.

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109

Approach 1 : we fix one element and find the remaining concecutive elements, this will take 3 nested loops.
            Time Complexity: O(N^3) 
            Space Complexity: O(1)

            code: 
              bool valid(int num, vector<int> &nums){
                  for(auto it:nums)
                      if(it == num) return true;
                  return false;
              }
              int longestConsecutive(vector<int>& nums) {
              // brute force O(N^3) O(1)
              
              int n = nums.size();
              int longest_sub = 0;
              for(int i=0; i<n; i++){
                  int num = nums[i];
                  int cur_sub = 1;
                  while(valid(num,nums)){
                      num++;
                      cur_sub++;
                  }
                  longest_sub = max(longest_sub,cur_sub);
              }
              return longest_sub;
Approach 2: we can reduce the search by using hash map the reduce the searching time.
          Time Complexity: O(N^2)
          Space Complexity: O(N)
         Code:
              // optimised O(N^2) O(N)
                unordered_set<int> st;
                for(auto it: nums)
                    st.insert(it);
                int cnt = 0;
                for(int i=0; i<nums.size(); i++){
                    int temp = 0;
                    int num = nums[i];
                        while(true){
                            if(st.find(num)==st.end()) break;
                            num++;
                            temp++;
                        }
                    cnt = max(cnt,temp);
                }
                return cnt;

Approach 3: we can observe something if we somehow finds the starting point of the concecutive no. then we dont have to check for every element and we can reduce the 
            time complexity, and for that we know that a starting point doesn't have a previous value, like if 2 is the stating point there shouldn't be any 1 the array
            then only we can say that its the starting point so we only check consecutives for only those no. who doesn't have previous value by this we do not have to
            check for every no.

            Time Complexity: O(N)
            Space Complexity: O(1)

            Code: 
            //  MOST OPTIMISED O(N) O(N)
                  unordered_set<int> st;
                  for(auto it: nums)
                      st.insert(it);
                  int cnt = 0;
                  for(int i=0; i<nums.size(); i++){
                      int temp = 0;
                      int num = nums[i];
                      if(st.find(num-1) == st.end()){
                          while(true){
                              if(st.find(num)==st.end()) break;
                              num++;
                              temp++;
                          }
                      }
                      cnt = max(cnt,temp);
                  }
                  return cnt;
              }
