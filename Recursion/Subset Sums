Q. Given a list arr of N integers, print sums of all subsets in it.

Example 1:
Input:
N = 2
arr[] = {2, 3}

Output:
0 2 3 5
Explanation:
When no elements is taken then Sum = 0.
When only 2 is taken then Sum = 2.
When only 3 is taken then Sum = 3.
When element 2 and 3 are taken then 
Sum = 2+3 = 5.

Example 2:
Input:
N = 3
arr = {5, 2, 1}
Output:
0 1 2 3 5 6 7 8

Approach 1: we will use the pick and not pick method where we call two recursive call one picking the current element and adding them to answer and when the
            index == n thats where our base case will hit and starts returing the recursive call.
            Time Complexity: O(2^N)
            Space Complexity: O(2^N) recursive call stack space
            code: 
            class Solution
            {
            public:
                void findsubset(int idx, int sum, vector<int>&ans, vector<int>arr, int n){
                    //base case
                    if(idx == n){
                        ans.push_back(sum);
                        return;
                    }
                    
                    //pick element
                    findsubset(idx+1, sum+arr[idx], ans, arr, n);
                    
                    //not pick element
                    findsubset(idx+1, sum, ans, arr, n);
                }
                vector<int> subsetSums(vector<int> arr, int N)
                {
                    // Write Your Code here
                    vector<int> ans;
                    findsubset(0,0,ans,arr,N);
                    return ans;
                }
            };
