Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 
Constraints:
1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

Approach 1: In this question we ll use pick and not pick method to generate the combination like the combination sum 1.
          1. we generate all combination == target value and store it in a hash set to avoid duplicates.
          Time Complexity : O(2^N)
          Space Complexity: O(N) + O(N) hashset
Approach 2: we can reduce the space complexity by removing hashset and opt for another method.
          1.we generate all combination == target.
          2.To avoid duplicate combination we'll not taking same value if its not the first element of that recursive call, 
            means if(index != i (loops starting index) && nums[i] == nums[i-1])  // ex nums = [2,3,    3,5,1]
                                                                                                 idx   i   here we can see idx != i means if we take this element we might get duplicate combination.
                                                                                // ex nums =[2,  3,   3,5,1]
                                                                                                idx=i        means its first element or we can say it could be starting element of the combination, so we have to take it.
        3.while returning we have to pop_back() so that we get different element (backtracking part).
        Time Complexity: O(2^N)
        Space Complexity: O(N) recursive call stack 
        Code:

        void solve(int idx, vector<int> &sum, vector<vector<int>> &ans, vector<int> candidates,
          int target){
             if(target == 0) ans.push_back(sum);
              for(int i=idx; i<candidates.size(); i++){
                  if(i!=idx && candidates[i] == candidates[i-1]) continue;
                  if(target>=candidates[i]){
                      sum.push_back(candidates[i]);
                      solve(i+1,sum,ans,candidates,target-candidates[i]);
                      sum.pop_back();
                  }
              }
          }
          vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
              sort(candidates.begin(),candidates.end());
              vector<vector<int>> ans;
              vector<int> sum;
              solve(0,sum,ans,candidates,target);
              sort(ans.begin(),ans.end());
              return ans;
          }
