You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104


Approach 1: traverse through the matrix and find the target.
            T.C: O(N*N) S.C: O(1)
Approach 2 : we can use the concept of binary search in as the matrix is sorted row and col wise.
             for that we ll make low as 1 and high as row*col and to access that high and low index we ll use % / operator and use the B.S logic.
            T.C:  O(log(m * n)) S.C: O(1)
            
            Code: 
            bool searchMatrix(vector<vector<int>>& matrix, int target) {
                int low = 1;
                int row = matrix.size();
                int col = matrix[0].size();
                int high = row*col;
                while(low<=high){
                    int mid = low+(high-low)/2;
                    int i = (mid-1)/col;
                    int j = (mid-1)%col;
                    if(matrix[i][j] == target) return true;
                    if(matrix[i][j]<target) low = mid+1;
                    else high = mid-1;
                }
                return false;
        }
           
