There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3

Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 
Constraints:
1 <= m, n <= 100

Approach 1: we can use recursion, and recursivly try all the paths and count the unique paths. For that we ll break down the problem in sub-problems,
            i.e : At each cell we can either move down or move right.
                  Choosing either of these moves could lead us to an unique path
                  So we consider both of these moves.
                  If the series of moves leads to a cell outside the grid's boundary, we can return 0 denoting no valid path was found.
                  If the series of moves leads us to the target cell (m-1, n-1), we return 1 denoting we found a valid unique path from start to end.
             Time Complexity : O(2m+n), where m and n are the given input dimensions of the grid
             Space Complexity : O(m+n), required by implicit recursive stack
             
             Code: 
             int uniquePaths(int m, int n, int i = 0, int j = 0) {
                if(i >= m || j >= n) return 0;                                    // reached out of bounds - invalid
                if(i == m-1 && j == n-1) return 1;                                // reached the destination - valid solution
            return uniquePaths(m, n, i+1, j) + uniquePaths(m, n, i, j+1);     // try both down and right
            }
Approach 2: we can use Dynamic Programming to reduce the time complexity using memory,
            The above solution had a lot of redundant calculations. There are many cells which we reach multiple times and calculate the answer 
            for it over and over again. However, the number of unique paths from a given cell (i,j) to the end cell is always fixed. 
            So, we dont need to calculate and repeat the same process for a given cell multiple times. 
            We can just store (or memoize) the result calculated for cell (i, j) and use that result in the future whenever required.
            Thus, here we use a 2d array dp, where dp[i][j] denote the number of unique paths from cell (i, j) to the end cell (m-1, n-1).
            Once we get an answer for cell (i, j), we store the result in dp[i][j] and reuse it instead of recalculating it.
            
            Time Complexity : O(m*n), the answer to each of cell is calculated only once and memoized.
                                There are m*n cells in total and thus this process takes O(m*n) time.
            Space Complexity : O(m*n), required to maintain dp.
          Code: 
          int findpath(int right, int down, int m, int n, vector<vector<int>>& dp){
              //base case 
              if(right >= n || down >= m) return 0;
              if(right == n-1 && down == m-1) return 1;
              if(dp[right][down]) return dp[right][down];
              return dp[right][down] = findpath(right+1,down,m,n,dp)+findpath(right,down+1,m,n,dp);
          }
          int uniquePaths(int m, int n) {
              vector<vector<int>> dp(n,vector<int>(m));
              return findpath(0,0,m,n,dp); 
         }

Approach 3: we can use dp+tabulation to reduce the recursive stack space this is just a minor space optimization.

           In this case, we first establish some base conditions first.
            We start at cell (0, 0), so dp[0][0] = 1.
            Since we can only move right or down, there is only one way to reach a cell (i, 0) or (0, j). Thus, we also initialize dp[i][0] = 1 and dp[0][j]=1.
            For every other cell (i, j) (where 1 <= i <= m-1 and 1 <= j <= n-1), we can reach here either from the top cell (i-1, j) 
            or the left cell (i, j-1). So the result for number of unique paths to arrive at (i, j) is the summation of both, i.e, dp[i][j] = dp[i-1][j] + dp[i][j-1].
           
           Time Complexity : O(m*n), we are computing dp values for each of the m*n cells from the previous cells value. 
                              Thus, the total number of iterations performed is requires a time of O(m*n).
           Space Complexity : O(m*n), required to maintain the dp matrix.
           
        Code:
          int uniquePaths(int m, int n) {
                vector<vector<int>> dp(m, vector<int>(n, 1));
                for(int i = 1; i < m; i++)
                    for(int j = 1; j < n; j++)
                        dp[i][j] = dp[i-1][j] + dp[i][j-1];   // sum of unique paths ending at adjacent top and left cells
                return dp[m-1][n-1];         // return unique paths ending at cell (m-1, n-1)
           }






