Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false
 

Constraints:

1 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
0 <= k <= 10^5

logic: we check for the nums[i] in map and if it exist we check abs(nums[i] - i) <=k then we return true
        else we ll push the nums[i] = i
      T.C: O(N) S.C: O(N)
      code: 
          bool containsNearbyDuplicate(vector<int>& nums, int k) {
            unordered_map<int,int> mp;
            int n = nums.size();
            for(int i=0; i<n; i++){
                if(mp.find(nums[i]) != mp.end() && (abs(mp[nums[i]]-i)<=k)){
                    return true;
                }
                mp[nums[i]] = i;
            }
            return false;
        }
