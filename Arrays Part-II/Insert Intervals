You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. 
You are also given an interval newInterval = [start, end] that represents the start and end of another interval.
Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).
Return intervals after the insertion.

Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

Constraints:

0 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 105
intervals is sorted by starti in ascending order.
newInterval.length == 2
0 <= start <= end <= 105

Approach 1: using sorting, first we insert the newInterval into the given intervals and then sort them so that the newly inserted interval should be in a correct place.
            second, we iterate the intervals and check if the array is empty means we need to insert the interval && if the second element of the interval is smaller then the answer's last element means
              its a newinterval which needs to be pushed into the answer array because it doesn't require merging.
              else we need to update our last inserted second element to the maximum of the intervals second element.
            T.C: O(NlogN) S.C:O(N)sorting space
          code:
              vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
                // Using Sort O(NlogN)
                   vector<vector<int>> ans;
                   intervals.push_back(newInterval);
                   int n = intervals.size();
                   sort(intervals.begin(),intervals.end());
                   for(int i=0; i<n; i++){
                       if(ans.empty() || (intervals[i][0] > ans.back()[1]))
                            ans.push_back(intervals[i]);
                       else{
                           ans.back()[1] = max(intervals[i][1],ans.back()[1]);
                       }
                   }
                   return ans;
                }
Approach 2: As we can see that the given array is sorted so we can use that and avoid using sorting.
            case 1: Non Overlapping intervals before given newInterval -> push into the ans vector.
            case 2: Overlapping of intervals and newInterval update new interval
                      starting point of newInterval will be min of the interval starting point or starting point of newInterval
                      Ending point will be the max of interval ending point or newInterval end point.
            case 3:  Non overlapping intervals after the newintervals have been merged -> push ito ans vector
          T.C: O(N) S.C: O(1)
        code:
          // OPTIMISED APPROACH O(N) O(1)
              vector<vector<int>> ans;
              int n = intervals.size();
              int i=0;
              // case 1 : when we haven't got any merged intervals so we keep on pushing to ans
              while(i<n && intervals[i][1] < newInterval[0])
                  ans.push_back(intervals[i++]);
              
              // case 2 : when we got a merging interval and we have to merge 
              while(i<n && newInterval[1] >= intervals[i][0]){
                  newInterval[0] = min(newInterval[0], intervals[i][0]);
                  newInterval[1] = max(newInterval[1], intervals[i][1]);
                  i++;
              }
              ans.push_back(newInterval);
              // case 3: after merging the intervals we have to push the remaining elements
              while(i<n)
                  ans.push_back(intervals[i++]);
              return ans;
          }
