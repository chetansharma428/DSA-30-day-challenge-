Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 
Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.

Approach 1 : we sort the array and check two no. are same and return that no. 
            T.C: O(NlogN) S.C: O(N) sorting space else O(1)
 
Approach 2: we can we hash map and store the frequency of no. and if any no. frequency > 1 return that no.
          T.C: O(N) S.C: O(N)

Approach 3: we can use the original array as the visitor array and mark the visitors if we visit any no. twice thats our answer.
          T.C: O(N) S.C: O(1)
        
        code:
        int findDuplicate(vector<int>& nums) {
            int ans = 0;
            int n = nums.size();

            for(int i = 0 ;i<n;i++)
                nums[nums[i]%n] = nums[nums[i]%n]+n;

            for(int i = 0;i<n;i++)
                if(nums[i]>=n*2)
                    ans = i;

            return ans;
    }
