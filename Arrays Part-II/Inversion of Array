Problem Statement
For a given arr of size N with all distinct elements, Find the no. of inversion that may exist.
A pair is said to be inversion if( arr[i] > arr[j] ) where i<j

Sample Input 1 :
3
3 2 1
Sample Output 1 :
3
Explanation Of Sample Output 1:
We have a total of 3 pairs which satisfy the condition of inversion. (3, 2), (2, 1) and (3, 1).
Sample Input 2 :
5
2 5 1 3 4
Sample Output 2 :
4
Explanation Of Sample Output 1:
We have a total of 4 pairs which satisfy the condition of inversion. (2, 1), (5, 1), (5, 3) and (5, 4).


Approach 1 : we can simply think about brute force solution, i.e we fix one element and traverse throught rest of the elements and check for the condition,
             if true increment the inversion_count and return the answer.
             T.C: O(N^2) S.C: O(1)
             code:
             //brute force T.C: O(N^2) O(1)
                // int cnt = 0;
                // for(int i=0; i<n; i++)
                //     for(int j=i+1; j<n; j++)
                //         if(arr[i]>arr[j]) cnt++;
                // return cnt++;
Approach 2: we can use merge sort, like in merge sort we first divide the array to single elements and while returning we simply merge them and while merge we check
            that if first element is greater than the second array element means all the element in the first array is greater because both the array are sorted (merge
            sort concept) and with this we can simply calculate how many pairs can be made with that element by count+ = mid - left + 1; and after that we return the cnt;
            
            T.C: O(NlogN) S.C: O(N)
            
            code : 
            long long merge(long long *arr, int low, int mid, int high){
                    long long cnt = 0;
                    vector<int> temp;
                    int left = low;
                    int right = mid+1;
                    while(left<=mid && right<=high){
                        if(arr[left]<=arr[right]){
                            temp.push_back(arr[left++]);
                        }else{
                            cnt+=mid-left+1;
                            temp.push_back(arr[right++]);
                        }
                    }
                    while(left<=mid)
                        temp.push_back(arr[left++]);
                    while(right<=high)
                        temp.push_back(arr[right++]);

                    for(int i=low; i<=high; i++)
                        arr[i] = temp[i-low];
                    return cnt;
              }
            long long mergesort(long long *arr, int low, int high){
                  long long cnt = 0;
                  if(low>=high) return cnt;

                  int mid = (low+high)/2;
                  cnt+=mergesort(arr,low,mid);
                  cnt+=mergesort(arr,mid+1,high);
                  cnt+=merge(arr,low,mid,high);
                  return cnt;
              }
          long long getInversions(long long *arr, int n){
              //optimise O(NlogN) O(N)
              return mergesort(arr,0,n-1);
            
        }      
