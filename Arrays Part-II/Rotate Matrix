Rotate Image
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:
  1 2 3       7 4 1
  4 5 6  ->   8 5 2
  7 8 9       9 6 3
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000

Approach 1 : we can take another array of same size and traverse the one array by col wise and one by row wise and copy the array of original array to new array
            T.C: O(N*N) S.C : O(1)
            
Approach 2 : we can optimise the above approach by doing it in place by using swap. first we ll make the matrix row to col by just interchanging there indexes
            ex: swap(matrix[row][col],matrix[col][row]) and after that we ll simply reverse the matrix to make it fully rotate.
            
            T.C: O(N*N) S.C: O(1)
            Code:
            void rotate(vector<vector<int>>& matrix) {
                if(matrix.size() != 1){
                    int n = matrix.size();
                    for(int i=0; i<n; i++){
                        for(int j=i; j<n; j++){
                            swap(matrix[i][j],matrix[j][i]);
                        }
                    }
                    for(int i=0; i<n; i++){
                        reverse(matrix[i].begin(),matrix[i].end());
                    }
                }
            }
