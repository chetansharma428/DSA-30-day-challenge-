There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. 
Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.
You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

 

Example 1:


Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2
Example 2:


Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.
 

Constraints:

1 <= n <= 2 * 105
0 <= edges.length <= 2 * 105
edges[i].length == 2
0 <= ui, vi <= n - 1
ui != vi
0 <= source, destination <= n - 1
There are no duplicate edges.
There are no self edges.


Approach : BFS
      step 1 : make an adjacency list to store the graph.
      step 2 : make a visited array size N+1.
      step 3 : traverse the adjacency list using any traversal.
      step 4 : mark the visited the array to true while traversing.
      step 5 : return the visited[destination].
Complexity:
      Time complexity: O(E)
      Space complexity:O(E)
Code
      class Solution {
      public:
          bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
              // make an adjacency list 
              vector<int> g[n];
              for(int i=0; i<edges.size(); i++){
                  g[edges[i][0]].push_back(edges[i][1]);
                  g[edges[i][1]].push_back(edges[i][0]);
              }
              queue<int> q;
              q.push(source);
              vector<bool> vis(n,false);
              vis[source] = true;
              while(!q.empty()){
                  int cu = q.front();
                  q.pop();
                  for(int i=0; i<g[cu].size(); i++){
                      int cv = g[cu][i];
                      if(vis[cv] == false){
                          vis[cv] = true;
                          q.push(cv);
                      }
                  }
              }
              return vis[destination];
          }
      };
