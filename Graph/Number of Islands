Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

Intuition:
        As we visualise it as different connected components. where we can traverse the component from any source node.

Approach
        we just need to count how many times we need DFS to traverse the whole components. that's it

Complexity
          Time complexity: O(E) no. of edges
          Space complexity: O(Edges + Nodes + Nodes(call stack)) E>N = O(E)
Code:
      void Dfs(vector<vector<char>>& grid, int n, int m, int i, int j){
        //base case 
        if(i<0 || j<0 || i == n || j == m || grid[i][j] == '0')
            return;
        grid[i][j] = '0';
        Dfs(grid,n,m,i-1,j); // UP
        Dfs(grid,n,m,i+1,j); //DOWN
        Dfs(grid,n,m,i,j-1); //LEFT
        Dfs(grid,n,m,i,j+1); //RIGHT
    }
    int numIslands(vector<vector<char>>& grid) {
        int count = 0;
        int n = grid.size();
        int m = grid[0].size();
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++)
                if(grid[i][j] == '1'){
                // here the no. of dfs we are doing
                    Dfs(grid,n,m,i,j);
                    count++;
                }
        }
        return count;
    }
