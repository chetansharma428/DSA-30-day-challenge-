Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30

Approach 1 : we have to iterate over the array and add the previous and present element from the previous row.
            for that what we can do is we create an array and push first and second row values and start the loop with 2nd index and another loop to calculate the present row values using previous row.
            
          corner case : for starting row and ending row the values will be 1 and for that we ll use the size of the row array if it is 0 or n-1 that means 1 else arr[n-1]+arr[i]
          
          
          T.C : O(N^2) S.C: O(N^2) (answer array) else O(N)
          
          code: 
          vector<vector<int>> generate(int numRows) {
              vector<vector<int>> ans;
              ans.push_back({1});
              if(numRows == 1) return ans;
              ans.push_back({1,1});
              if(numRows == 2) return ans;
              vector<int> arr({1,1});
              for(int i=2; i<numRows; i++){
                  vector<int> temp(i+1);
                  for(int j=0; j<temp.size(); j++){
                      if(j == 0 || j==temp.size()-1) temp[j] = 1;
                      else{
                          temp[j] = arr[j-1]+arr[j];
                      }
                  }
                  arr = temp;
                  ans.push_back(temp);
              }
              return ans;
         }
