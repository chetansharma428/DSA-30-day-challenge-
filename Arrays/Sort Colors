Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.


Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.


Approach 1 : we can simply count the no. of 0's, 1's and 2's and store that numbers in the answer array.
            T.c: O(N)+O(N) = O(2N) S.C: O(1)
            
            code:
             void sortColors(vector<int>& nums) {
                  int zero = 0;
                  int one = 0;
                  int two = 0;
                  for(auto it:nums){
                      if(it == 0) zero++;
                      else if(it == 1) one++;
                      else two++;
                  }
                  int i=0;
                  while(zero){
                      nums[i++] = 0;
                      zero--;
                  }
                  while(one){
                      nums[i++] = 1;
                      one--;
                  }
                  while(two){
                      nums[i++] = 2;
                      two--;
                  }
          }
          
Approach 2: we can use the concept of two pointers, one pointer will point to start and one to end.
            our idea is to make 0 to front and 2 to back and after that 1 will automatically will be at its correct position.
            we iterate over the array and whenever we find 0 we swap with non 0 element and same for 2.
           
           T.c: O(N) S.C: O(1)  Most Optimised
          
          code : 
            void sortColors(vector<int>& nums) {
                int low = 0;
                int mid = 0;
                int high = nums.size()-1;
                while(mid<=high){
                    if(nums[mid] == 0)
                        swap(nums[low++],nums[mid++]);
                    else if(nums[mid] == 2)
                        swap(nums[high--],nums[mid]);
                    else mid++;
                }
            }
          
