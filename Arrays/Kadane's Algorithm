Maximum Subarray
Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

Approach 1 : fix one element and traverse the rest array and maintain a maxi variable and update the maxi if maxi is smaller than cur variable

          T.c: O(N^2)  S.C: O(1)
          
          code : 
          int maxSubArray(vector<int>& nums) {
              int maxi = INT_MIN;
              int cur = 0;
              int n = nums.size();
              for(int i=0; i<n; i++){
                  cur = 0;
                  for(int j=i; j<n; j++){
                      cur+=nums[j];
                      maxi = max(maxi,cur);
                  }
              }
              return maxi;
          }
Approach 2 : we can use kadane Algo. to find the max sub array at single loop.
      T.C: O(N) S.C: O(1)
     
     code:
     int maxSubArray(vector<int>& nums) {
           int ans = INT_MIN;
          int cur = 0;
          for(int i=0; i<nums.size(); i++){
              cur+=nums[i];
              ans = max(ans,cur);
              if(cur<0) cur = 0;
          }
          return ans;
    }
          
