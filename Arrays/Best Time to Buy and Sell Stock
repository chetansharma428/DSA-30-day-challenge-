You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104


Aproach 1: we can fix one element and treat it as buying price and iterate the rest of the array and treat every other element as selling price and maintain a maxi to store the maximum profit.
          T.C: O(N^2) S.C: O(1) 
          
          code : 
          int maxProfit(vector<int>& prices) {
              //brute force O(N^2) O(1)
            int max_profit = 0;
            int n = prices.size();
            for(int i=0; i<n; i++){
                int buy = prices[i];
                for(int j=i+1; j<n; j++){
                    max_profit = max(max_profit,prices[j]-buy);
                }
            }
            return max_profit;
        }
       
Approch 2 : as we know we have to buy at minimum price and sell at maximum price to gain max profit. now, for that what we will do is we ll simply take the min among the current element and previous min
            and maintain a profit variable and store the maximum profit by subtracting the buy and sell(which is the current element).
            
            T.C: O(N) S.C: O(1) 
            
            code: 
            int maxProfit(vector<int>& prices) {
              int buy = INT_MAX;
              int profit = 0;
              for(int i = 0;i<prices.size();i++){
                  buy = min(sell,prices[i]);
                  profit = max(profit,prices[i] - buy);
              }
              return profit;
        }
