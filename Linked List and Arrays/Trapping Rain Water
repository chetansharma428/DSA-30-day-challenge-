Q. Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
 
Constraints:
n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

Approach 1: we can use prefix and suffix array which gives next greater element at i'th index. we starts from 1 index and calculate with 
            ans += min(leftmax[i],rightmax[i]) - height[i];
          Time Complexity: O(N)+O(N)+O(N) = O(3N) or O(N)
          Space Complexity: O(N)+O(N) = O(2N) or O(N)
          Code: 
          int trap(vector<int>& height) {
              // brute force O(N)+O(N)+O(N)=O(3N) O(N)+O(N) = O(2N)
              int n = height.size();
              vector<int> leftmax(n);
              vector<int> rightmax(n);
              leftmax[0] = height[0];
              rightmax[n-1] = height[n-1];
              for(int i=1; i<n; i++)
                  leftmax[i] = max(leftmax[i-1],height[i]);
              for(int i=n-2; i>=0; i--)
                  rightmax[i] = max(rightmax[i+1],height[i]);
              int ans = 0;
              for(int i=1; i<n-1; i++)
                  ans+= (min(leftmax[i],rightmax[i])-height[i]);
              return ans;
          }
Approach 2: we can remove the extra space by using two pointer approach, what we do is we maintain leftmax and rightmax.
            Algo:
            1. two pointers left and right,
            2. check if(height[left] <= height[right]) means this guarantees that there is someone greater or equal to left means we water could be hold in this block.
            3. check(if(height[left] > leftmax) means our current block is greater than left and no water could be hold as our right side is already smaller and left
                                                is also smaller, so we need to update our leftmax with current block
            4.else part will contain same for the right part.
        intution behind this logic: what we need to find min(maxleft,maxright) we do this just to get the min from both the maxparts right, here we are looking at the
                                    maxmin part means we confirms the bigger block by taking the smaller or equal block this confirms that we can do something in the 
                                    current block as our rightpart is clear and we maintain the leftmax (which is nothing but minmax part) which is 
                                    used to calculate our water hold, you must be thinking what if block on right is smaller it could'nt as we already check left<=right
                                    and same for the right part.
            Time Complexity: O(N)
            Space Complexity: O(1)
            Code:
                  //optimised without extra space Two pointer approach
                    int n = height.size();
                    int left = 0;
                    int right = n-1;
                    int leftmax = height[0];
                    int rightmax = height[n-1];
                    int ans = 0;
                    while(left<right){
                        if(height[left]<=height[right]){ // this condition guarantees that there is a block which is greater than left side 
                            if(height[left]>leftmax) // here if the present is block is greater than our previous leftmax means no water could hold here
                                leftmax = height[left]; // we update our leftmax
                            else
                                ans += leftmax-height[left]; // means there is one block which is greater and some water could be hold here
                            left++; 
                        }else{ // same like above this gives guarantee and we know someone is greater on left 
                            if(height[right]>rightmax) // same like above if the present is greater then there is no way it can hold any water
                                 rightmax = height[right]; // updating our rightmax
                            else
                                ans += rightmax-height[right]; // means our present block could hold some water
                            right--;
                        }
                    }
                    return ans;
