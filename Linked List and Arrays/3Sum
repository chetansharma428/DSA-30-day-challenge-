PROBLEM STATEMENT
Q. Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 
Constraints:
3 <= nums.length <= 3000
-105 <= nums[i] <= 105

Approach 1 (Brute Force): we can sort the array, use 3 loops and take 3 no. which is == 0 and store them in hashset to avoid duplicates. 
                        Time Complexity: O(N^3)
                        Space Complexity: O(N)
                        code: 
                            vector<vector<int>> threeSum(vector<int>& nums) {
                              //brute force O(N^3) O(N) using 3 loops (hashset + sorting) 
                               vector<vector<int>> ans;
                               int n = nums.size();
                               sort(nums.begin(),nums.end());
                               set<vector<int>> st;
                               for(int i=0; i<n-2; i++)
                                   for(int j=i+1; j<n-1; j++)
                                       for(int k=j+1; k<n; k++){
                                           int sum = nums[i]+nums[j]+nums[k];
                                           if(sum == 0)
                                              st.insert({nums[i],nums[j],nums[k]});
                                       }
                               for(auto it:st)
                                  ans.push_back(it);
                              return ans;
                            }
Approach 2: we can reduce the time complexity by removing the last loop as we have sorted the array we can use two pointers to find the 2 nos. and again store them
            in hashset to avoid duplicates.
            Time Complexity: O(N^2)
            Space Complexity: O(1)
            Code:
                //Hashset + Two Pointers approach O(N^2) O(N)
                  vector<vector<int>> ans;
                  int n = nums.size();
                  sort(nums.begin(),nums.end());
                  set<vector<int>> st;
                  for(int i=0; i<n-2; i++){
                      int low = i+1;
                      int high = n-1;
                      while(low<high){
                          int sum = nums[i]+nums[low]+nums[high];
                          if(sum<0) low++;
                          else if(sum>0) high--;
                          else{
                              st.insert({nums[i],nums[low],nums[high]});
                              low++; high--;
                          }
                      }
                  }
                  for(auto it:st)
                      ans.push_back(it);
                  return ans;
              } 
Approach 3 (optimal) : we can reduce the space complexity by removing the hashset.
                        we have to run a loop which will ignore the duplicates of the two pointers as we dont want duplicates.
                        what we ll do is while(low<high && nums[low-1] != nums[low]) low++; same for high pointer
                Corner case: if(i>0 && nums[i] == nums[i-1]) continue;
                  Time Complexity: O(N^2) 
                  Space Complexity: O(1)
                  Code:
                  // Most Optimised O(N^2) O(1)
                    vector<vector<int>> ans;
                    int n = nums.size();
                    sort(nums.begin(),nums.end());
                    for(int i=0; i<n-2; i++){
                        if(i>0 && nums[i] == nums[i-1]) continue;
                        int low = i+1;
                        int high = n-1;
                        while(low<high){
                            int sum = nums[i]+nums[low]+nums[high];
                            if(sum<0) low++;
                            else if(sum>0) high--;
                            else{
                                ans.push_back({nums[i],nums[low],nums[high]});
                                low++; high--;
                                //for duplicates
                                while(low<high && nums[low-1] == nums[low]) low++;
                                while(low<high && nums[high+1] == nums[high]) high--;
                            }
                            
                        }
                    }
                    return ans;
